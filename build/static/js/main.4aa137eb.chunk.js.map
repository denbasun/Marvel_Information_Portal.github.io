{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","_jsxs","className","children","_jsx","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","ErrorMesage","objectFit","src","img","alt","MarvelService","constructor","_this","_apiBase","_apiKey","_baseOffset","getResource","async","res","fetch","url","ok","Error","concat","status","json","getAllCharacters","offset","arguments","length","undefined","console","log","data","results","map","_trnsformCharacter","getCharacter","id","this","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","RandomChar","Component","state","loading","error","marvelService","onCharLoaded","setState","onCharLoading","onError","updateChar","Math","floor","random","then","catch","componentDidMount","componentWillUnmount","clearInterval","timerId","render","errorMessage","ErrorMessage","spinner","content","View","onClick","mjolnir","_ref","imgStyle","CharList","charList","newItemLoading","charEnded","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","nextByScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","itemsRef","setRef","elem","push","focusOnItem","forEach","item","classList","remove","add","focus","addEventListener","removeEventListener","renderItems","arr","i","tabIndex","ref","props","onCharSelected","onKeyDown","e","key","disabled","Skeleton","_Fragment","CharInfo","charId","componentDidUpdate","prevProps","prevState","skeleton","ErrorBoundary","componentDidCatch","errorInfo","App","selectedChar","decoration","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.4aa137eb.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMesage = () =>{\r\n\r\n\r\n    return (\r\n        <img style = {{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt ='error'></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMesage","// Мое Рещнеи по кнопке Load More\r\n// тут мы не юзаем наследование от реката потому что этому классу и не нужено ничего от реакт \r\n\r\n// class MarvelService {\r\n//     //когда ставим лодаш или подчерк в низу в переменной то мы говорим другим прогерам что эти данные нельзя менять, неформально\r\n//     _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n//     _apiKey = 'apikey=88a31499e2fdfa92ebd0fb37639efba2';\r\n    \r\n//     _baseLimit = 9;\r\n\r\n//     getResource = async(url) =>{\r\n//         let res = await fetch(url);\r\n//         if(!res.ok){\r\n//             throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//         }\r\n        \r\n//         return await res.json();\r\n//     }\r\n\r\n//     getAllCharacters = async (limit) =>{\r\n        \r\n//         this._baseLimit = this._baseLimit + limit\r\n//         const res = await this.getResource(`${this._apiBase}characters?limit=${this._baseLimit}&offset=210&${this._apiKey}`);\r\n//         console.log(res.data.results[0]);\r\n//         return res.data.results.map(this._trnsformCharacter);\r\n\r\n        \r\n//     }\r\n\r\n   \r\n//     getCharacter = async(id) =>{\r\n//         console.log(id)\r\n//         const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n//         return this._trnsformCharacter(res.data.results[0])\r\n//     }\r\n//     //началось с _ это лодыш, он говорит другим разрабам что ничего в функции менять нельзя\r\n//     // тут мы можем трансформировать все данные что нам приходять из api и возвращать обычный объект\r\n//     _trnsformCharacter = (char) =>{\r\n//         return {\r\n//             id: char.id,\r\n//             name: char.name,\r\n//             description: char.description ? `${char.description.slice(0, 170)}...` : 'No description available',\r\n//             thumbnail:  char.thumbnail.path + '.' + char.thumbnail.extension,\r\n//             homepage:char.urls[0].url,\r\n//             wiki: char.urls[1].url,\r\n//             comics: char.comics.items,\r\n            \r\n//         }\r\n//     }\r\n\r\n// }\r\n\r\n// export default MarvelService;\r\n\r\n//Ивана решение по кнопке Load More\r\n\r\n// тут мы не юзаем наследование от реката потому что этому классу и не нужено ничего от реакт \r\n\r\nclass MarvelService {\r\n    //когда ставим лодаш или подчерк в низу в переменной то мы говорим другим прогерам что эти данные нельзя менять, неформально\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=88a31499e2fdfa92ebd0fb37639efba2';\r\n    \r\n    _baseOffset = 210;\r\n\r\n    getResource = async(url) =>{\r\n        let res = await fetch(url);\r\n        if(!res.ok){\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n        \r\n        return await res.json();\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) =>{\r\n        \r\n        \r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        console.log(res.data.results[0]);\r\n        return res.data.results.map(this._trnsformCharacter);\r\n\r\n        \r\n    }\r\n\r\n   \r\n    getCharacter = async(id) =>{\r\n        console.log(id)\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        return this._trnsformCharacter(res.data.results[0])\r\n    }\r\n    //началось с _ это лодыш, он говорит другим разрабам что ничего в функции менять нельзя\r\n    // тут мы можем трансформировать все данные что нам приходять из api и возвращать обычный объект\r\n    _trnsformCharacter = (char) =>{\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 170)}...` : 'No description available',\r\n            thumbnail:  char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage:char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","// import { Component } from 'react';\n// import MarvelService from '../../services/MarvelService';\n// import './randomChar.scss';\n\n\n// import mjolnir from '../../resources/img/mjolnir.png';\n\n// class RandomChar extends Component {\n//     //тут и спользуется синтаксис полей классов, поэтому мы не пишем конструктор и тд, это тот експерементальный метод но чтобы вызвать метод  uppdateChar чтобы сразу что-то загрузилось нам все равно надо использовать конструктор\n//     constructor(props){\n//         super(props);\n//         this.uppdateChar();\n//     }\n//     state = {\n//        char: {}\n\n//     }\n//     //тут и спользуется синтаксис полей классов\n//     marvelService = new MarvelService();\n\n//     // если персонаж загрузился\n//     onCharLoaded = (character) =>{\n//         this.setState({char : character})\n//     }\n//     //метод что обращается к серверу, получает данные и записывает данные в state\n    \n\n//     uppdateChar = () =>{\n//         //создаем случайный id\n//         const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n//         // this.marvelService.getAllCharacters().then(res =>console.log(res));\n//         this.marvelService\n//             .getCharacter(id)\n//             //когда юзаем промисы когда цепочка через then идет, у нас в эту функцию then приходит аргумент и если в скобках стоит ссылка на функцию (this.onCharLoaded) то аргумнет что прийдет в .then будет автоматически подставляться в (this.onCharLoaded)\n//             .then(this.onCharLoaded)\n            \n//     }\n    \n//     render(){\n//         const {char:{name, description, thumbnail, homepage, wiki}} = this.state;\n//         return (\n//             <div className=\"randomchar\">\n//                 <div className=\"randomchar__block\">\n//                     <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n//                     <div className=\"randomchar__info\">\n//                         <p className=\"randomchar__name\">{name}</p>\n//                         <p className=\"randomchar__descr\">\n//                             {description}\n//                         </p>\n//                         <div className=\"randomchar__btns\">\n//                             <a href={homepage} className=\"button button__main\">\n//                                 <div className=\"inner\">homepage</div>\n//                             </a>\n//                             <a href={wiki} className=\"button button__secondary\">\n//                                 <div className=\"inner\">Wiki</div>\n//                             </a>\n//                         </div>\n//                     </div>\n//                 </div>\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button className=\"button button__main\">\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// export default RandomChar;\n\n// Упрок по Спинеру и ошибке , Хороший тон приложения\n\n// import { Component } from 'react';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMesage from '../errorMessage/ErrorMesage';\n// import MarvelService from '../../services/MarvelService';\n// import './randomChar.scss';\n\n\n// import mjolnir from '../../resources/img/mjolnir.png';\n\n\n// class RandomChar extends Component {\n//     //тут и спользуется синтаксис полей классов, поэтому мы не пишем конструктор и тд, это тот експерементальный метод но чтобы вызвать метод  uppdateChar чтобы сразу что-то загрузилось нам все равно надо использовать конструктор\n//     constructor(props){\n//         super(props);\n        \n//     }\n//     state = {\n//        char: {},\n//        loading: true,\n//        error: false,\n\n//     }\n//     //тут и спользуется синтаксис полей классов\n//     marvelService = new MarvelService();\n\n\n\n//     // если персонаж загрузился\n//     onCharLoaded = (character) =>{\n//         this.setState({\n//             char : character, \n//             loading: false,\n            \n//         })\n//     }\n//    // если ошибка\n//     onError = () =>{\n//         this.setState({\n//             loading: false,\n//             error: true,\n//         })\n//     }\n//     //метод что обращается к серверу, получает данные и записывает данные в state\n//     uppdateChar = () =>{\n//         //создаем случайный id\n//         // const id = 1009145\n\n\n//         const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n//         // this.marvelService.getAllCharacters().then(res =>console.log(res));\n//         this.marvelService\n//             .getCharacter(id)\n//             //когда юзаем промисы когда цепочка через then идет, у нас в эту функцию then приходит аргумент и если в скобках стоит ссылка на функцию (this.onCharLoaded) то аргумнет что прийдет в .then будет автоматически подставляться в (this.onCharLoaded)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError)\n            \n            \n//     }\n\n   \n    \n//     render(){\n//         const {char, loading, error} = this.state;\n//             const errorMessage = error ? <ErrorMesage/> : null;\n//             const spinner = loading ? <Spinner/> : null;\n//             const content = !(loading || error) ? <View char = {char}/> : null;\n        \n//         return (\n            \n//             <div className=\"randomchar\">\n                \n//                 {errorMessage }\n//                 {spinner }\n//                 {content}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button className=\"button button__main\">\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// //простой рендеряший компонент и тут нет никакой логики\n// const View = ({char}) =>{\n//     const {name, description, thumbnail, homepage, wiki}= char;\n//     return (\n//         <div className=\"randomchar__block\">\n//             <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">\n                    \n//                     {description}\n//                 </p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default RandomChar;\n\n// Урок по жизненноиму циклу компонентов и удаление ошибки и потвторного рендера функций когда у нас запрос находился в конструкторе\n// + Мое дз по добавлению кнопки и править баг картинки\n\n// import { Component } from 'react';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './randomChar.scss';\n\n\n// import mjolnir from '../../resources/img/mjolnir.png';\n\n\n// class RandomChar extends Component {\n//     //тут и спользуется синтаксис полей классов, поэтому мы не пишем конструктор и тд, это тот експерементальный метод но чтобы вызвать метод  uppdateChar чтобы сразу что-то загрузилось нам все равно надо использовать конструктор\n    \n//     state = {\n//        char: {},\n//        loading: true,\n//        error: false,\n\n//     }\n//     //тут и спользуется синтаксис полей классов\n//     marvelService = new MarvelService();\n\n//     // исправдление ошибки и потвторного рендера функций когда у нас запрос находился в конструкторе\n//     componentDidMount(){\n//         this.updateChar();\n//     }\n\n//     // если персонаж загрузился\n//     onCharLoaded = (character) =>{\n//         console.log('loading')\n//         this.setState({\n//             char : character, \n//             loading: false,\n            \n//         })\n//     }\n\n    \n//    // если ошибка\n//     onError = () =>{\n//         this.setState({\n//             loading: false,\n//             error: true,\n//         })\n//     }\n//     //метод что обращается к серверу, получает данные и записывает данные в state\n//     updateChar = () =>{\n//         //создаем случайный id\n//         // const id = 1009145\n\n//         // const id = Math.floor(Math.random() * (1009148 - 1009144) + 1009144); // рандом в котором есть как как и ошибка так и норм варики для проверки\n//         const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n//         // this.marvelService.getAllCharacters().then(res =>console.log(res));\n//         this.marvelService\n            \n//             .getCharacter(id)\n//             //когда юзаем промисы когда цепочка через then идет, у нас в эту функцию then приходит аргумент и если в скобках стоит ссылка на функцию (this.onCharLoaded) то аргумнет что прийдет в .then будет автоматически подставляться в (this.onCharLoaded)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError)\n            \n            \n//     }\n\n//     onClick = (e) =>{\n        \n//         this.updateChar();\n//         this.setState({\n            \n//             loading: true,\n//             error: false,\n//         })\n//     }\n    \n//     render(){\n//         const {char, loading, error} = this.state;\n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error) ? <View char = {char}/> : null;\n        \n//         return (\n            \n//             <div className=\"randomchar\">\n                \n//                 {errorMessage }\n//                 {spinner }\n//                 {content}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button className=\"button button__main\">\n//                         <div onClick= {this.onClick}className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// //простой рендеряший компонент и тут нет никакой логики\n// const View = ({char}) =>{\n    \n//     const {name, description, thumbnail, homepage, wiki}= char;\n//     let objectFitValue = '';\n\n//     if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ){\n//         objectFitValue = 'contain';\n//     }else{\n//         objectFitValue = 'cover';\n//     }\n//     const img = <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={{objectFit: `${objectFitValue}`}}/>\n//     return (\n//         <div className=\"randomchar__block\">\n//             {img}\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">\n                    \n//                     {description}\n//                 </p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default RandomChar;\n\n\n// Урок по жизненноиму циклу компонентов и удаление ошибки и потвторного рендера функций когда у нас запрос находился в конструкторе\n// + Ивана дз по добавлению кнопки и править баг картинки\n\nimport { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component {\n    state = {\n        char: {},\n        loading: true,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n         \n        this.updateChar();\n        // this.timerId = setInterval(this.updateChar, 15000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId);\n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char, \n            loading: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n    }\n\n    render() {\n\n        const {char, loading, error} = this.state;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={this.updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","// Мое ДЗ на добавление карточек\n// import './charList.scss';\n// import Spinner from '../spinner/Spinner';\n// import { Component } from 'react';\n// import MarvelService from '../../services/MarvelService';\n\n\n// class  CharList extends  Component{\n//     state = {\n        \n//         chars: [],\n//         loading: true,\n//      }\n//      marvelService = new MarvelService();\n\n     \n//     componentDidMount(){\n        \n//         this.updateCharList();\n       \n//     }\n\n//     onCharsLoaded = (characters) =>{\n       \n//         console.log(characters)\n//         this.setState({\n//             chars: characters, \n//             loading: false,\n            \n//         })\n        \n//     }\n\n\n//      updateCharList = () =>{\n        \n//         this.marvelService\n            \n//             .getAllCharacters()\n//             //когда юзаем промисы когда цепочка через then идет, у нас в эту функцию then приходит аргумент и если в скобках стоит ссылка на функцию (this.onCharLoaded) то аргумнет что прийдет в .then будет автоматически подставляться в (this.onCharLoaded)\n//             .then(this.onCharsLoaded)\n//             // .catch(this.onError)\n            \n            \n//     }\n\n//     render(){\n        \n        \n//         const {chars, loading} = this.state;\n//         console.log(chars)\n      \n    \n        \n//         const items = chars.map(item => (\n\n            \n//             <li  className=\"char__item\"  key= {item.id}>\n//             <img src= {item.thumbnail} alt=\"abyss\" style={item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ?{ objectFit: 'contain'} : {objectFit: 'cover'}}/>\n//             <div className=\"char__name\">{item.name}</div>\n//             </li>\n            \n            \n//         ))\n//         const spinner = loading ? <Spinner/> : null;\n//         return (\n            \n//             <div className=\"char__list\">\n//                 <ul className=\"char__grid\">\n//                     {spinner}\n//                     {items}\n                    \n//                 </ul>\n//                 <button className=\"button button__main button__long\">\n//                     <div className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n    \n// }\n\n\n\n\n\n// export default CharList;\n\n// ДЗ Ивана на добавление карточек\n// Мое решение по нажатию кнопки Load More\n\n// import {Component} from 'react';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './charList.scss';\n\n// class CharList extends Component {\n\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false\n//     }\n//     limit = 0;\n    \n//     marvelService = new MarvelService();\n    \n\n//     componentDidMount() {\n        \n//         this.marvelService.getAllCharacters(this.limit)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n\n//     // componentDidUpdate(prevProps, prevState) {\n//     //     if(this.state.charList !== prevProps.charId){\n//     //         this.updateChar();\n//     //     }\n        \n//     // }\n\n//     onCharListLoaded = (charList) => {\n//         this.setState({\n//             charList,\n//             loading: false\n//         })\n//     }\n\n//     onError = () => {\n//         this.setState({\n//             error: true,\n//             loading: false\n//         })\n//     }\n\n//     next = () =>{\n        \n//         this.marvelService.getAllCharacters(this.limit + 9)\n//             .then(this.onCharListLoaded)\n//             .catch(this.onError)\n//     }\n\n    \n//     // Этот метод создан для оптимизации, \n//     // чтобы не помещать такую конструкцию в метод render\n//     renderItems(arr) {\n//         const items =  arr.map((item) => {\n//             let imgStyle = {'objectFit' : 'cover'};\n//             if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//                 imgStyle = {'objectFit' : 'unset'};\n//             }\n            \n//             return (\n//                 <li \n//                     className=\"char__item\"\n//                     key={item.id} \n//                     onClick ={() => this.props.onCharSelected(item.id)}>\n//                         <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n//                         <div className=\"char__name\">{item.name}</div>\n//                 </li>\n//             )\n//         });\n//         // А эта конструкция вынесена для центровки спиннера/ошибки\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n\n//     // next = () =>{\n//     //     this.componentDidUpdate();\n//     // }\n\n//     render() {\n\n//         const {charList, loading, error} = this.state;\n        \n//         const items = this.renderItems(charList);\n//         // const update = this.componentUpdate();\n        \n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error) ? items : null;\n\n//         return (\n//             <div className=\"char__list\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <button onClick={this.next} className=\"button button__main button__long\">\n//                     <div  className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n\n// export default CharList;\n\n// Ивана решение по нажатию кнопки Load More\n// И Мое дз по добавлениею активной карточки и переключение клавиатурой через таб\n// import {Component} from 'react';\n// import PropTypes from 'prop-types'; \n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n// import './charList.scss';\n\n// class CharList extends Component {\n\n//     state = {\n//         charList: [],\n//         loading: true,\n//         error: false,\n//         newItemLoading: false,\n//         offset: 1400,\n//         charEnded: false,\n//         onRequest: false,\n//         onClickId: this.props.selectedChar\n//     }\n    \n    \n//     marvelService = new MarvelService();\n    \n   \n    \n\n//     componentDidMount() {\n\n         \n//         this.onRequest()\n//         window.addEventListener('scroll', this.nextByScroll);  \n       \n//     }\n   \n//     componentWillUnmount() {\n        \n//         window.removeEventListener('scroll', this.nextByScroll);\n//     }\n\n//     onRequest = (offset) =>{\n//         this.setState({\n//             onRequest:true,\n            \n//         })\n        \n        \n        \n//         this.onCharListLoading();\n//         this.marvelService.getAllCharacters(offset)\n//             .then(this.onCharListLoaded)\n        \n       \n        \n//     }\n\n    \n\n//     onCharListLoading = () =>{\n//         this.setState({\n            \n//             newItemLoading: true\n//         })\n//     }\n\n    \n\n//     onCharListLoaded = (newCharList) => {\n       \n//         //запись (({charList}) => ({})) - значит что мы возвращаем объект из этой функции\n//         let ended = false\n//         if(newCharList.length < 9){\n//             ended = true\n//         }\n       \n        \n//         this.setState(({offset,charList}) => ({\n               \n            \n//                 charList: [...charList, ...newCharList],\n//                 loading: false,\n//                 newItemLoading: false,\n//                 offset: offset + 9,\n//                 charEnded: ended,\n                \n\n            \n//         }))\n\n       \n//     }\n\n//     onError = () => {\n//         this.setState({\n//             error: true,\n//             loading: false\n//         })\n//     }\n\n//     nextByScroll = () =>{\n        \n// \t\tif(window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight ){\n// \t\t\tif(this.state.loading === false){\n//                 this.onRequest(this.state.offset)\n//             }\n            \n        \n// \t    }\n    \n\n//     }\n\n   \n//     // Этот метод создан для оптимизации, \n//     // чтобы не помещать такую конструкцию в метод render\n//     renderItems(arr) {\n        \n    \n//         const items =  arr.map((item, i) => {\n//             let imgStyle = {'objectFit' : 'cover'};\n//             if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//                 imgStyle = {'objectFit' : 'unset'};\n//             }\n//            const charItem = this.props.selectedChar === item.id ? 'char__item char__item_selected' : 'char__item'\n//             return (\n//                 <li \n//                     tabIndex={0}\n//                     className= {charItem }\n//                     key={item.id} \n//                     onClick ={(e) => this.props.onCharSelected(item.id) } onKeyDown ={(e) => this.props.onCharSelected(item.id)}>\n//                         <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n//                         <div className=\"char__name\">{item.name}</div>\n//                 </li>\n//             )\n//         });\n//         // А эта конструкция вынесена для центровки спиннера/ошибки\n//         return (\n//             <ul className=\"char__grid\">\n//                 {items}\n//             </ul>\n//         )\n//     }\n\n    \n\n//     render() {\n\n//         const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        \n//         const items = this.renderItems(charList);\n//         // const update = this.componentUpdate();\n        \n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error) ? items : null;\n\n//         return (\n//             <div className=\"char__list\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <button \n//                       className=\"button button__main button__long\"\n//                       disabled = {newItemLoading}\n//                       style = {{display: charEnded ? \"none\": \"block\"}}\n//                       //в кнопке стрелочный формат записи чтобы передавать во внутрь аргумент\n//                       onClick= {() => this.onRequest(offset)}>\n//                     <div  className=\"inner\">load more</div>\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\n// export default CharList;\n\n// Ивана дз по добавлениею активной карточки и переключение клавиатурой через таб  c помощью реф и фокус\n\nimport {Component} from 'react';\nimport PropTypes from 'prop-types'; \nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 1400,\n        charEnded: false,\n        onRequest: false,\n        \n    }\n    \n    \n    marvelService = new MarvelService();\n    \n   \n    \n\n    componentDidMount() {\n\n         \n        this.onRequest()\n        window.addEventListener('scroll', this.nextByScroll);  \n       \n    }\n   \n    componentWillUnmount() {\n        \n        window.removeEventListener('scroll', this.nextByScroll);\n    }\n\n    onRequest = (offset) =>{\n        this.setState({\n            onRequest:true,\n            \n        })\n        \n        \n        \n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n        \n       \n        \n    }\n\n    \n\n    onCharListLoading = () =>{\n        this.setState({\n            \n            newItemLoading: true\n        })\n    }\n\n    \n\n    onCharListLoaded = (newCharList) => {\n       \n        //запись (({charList}) => ({})) - значит что мы возвращаем объект из этой функции\n        let ended = false\n        if(newCharList.length < 9){\n            ended = true\n        }\n       \n        \n        this.setState(({offset,charList}) => ({\n               \n            \n                charList: [...charList, ...newCharList],\n                loading: false,\n                newItemLoading: false,\n                offset: offset + 9,\n                charEnded: ended,\n                \n\n            \n        }))\n\n       \n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    nextByScroll = () =>{\n        \n\t\tif(window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight ){\n\t\t\tif(this.state.loading === false){\n                this.onRequest(this.state.offset)\n            }\n            \n        \n\t    }\n    \n\n    }\n\n    itemsRef = [];\n\n    setRef = elem =>{\n        this.itemsRef.push(elem)\n    }\n\n    focusOnItem = (id)=>{\n        this.itemsRef.forEach(item =>{\n            item.classList.remove('char__item_selected');\n            \n        })\n        this.itemsRef[id].classList.add('char__item_selected');\n        this.itemsRef[id].focus();\n    }\n   \n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    renderItems(arr) {\n        \n    \n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n          \n            return (\n                <li \n                    tabIndex={0}\n                    ref = {this.setRef}\n                    className= \"char__item\"\n                    key={item.id} \n                    onClick ={() => {\n                        this.props.onCharSelected(item.id);\n                        this.focusOnItem(i) }} \n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);        \n                        }\n                    }}>    \n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    \n\n    render() {\n\n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n        \n        const items = this.renderItems(charList);\n        // const update = this.componentUpdate();\n        \n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                      className=\"button button__main button__long\"\n                      disabled = {newItemLoading}\n                      style = {{display: charEnded ? \"none\": \"block\"}}\n                      //в кнопке стрелочный формат записи чтобы передавать во внутрь аргумент\n                      onClick= {() => this.onRequest(offset)}\n                      >\n                    <div  className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\nimport {Component} from 'react';\nimport PropTypes from 'prop-types'; //для проверки типов данных пропсов\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nclass CharInfo extends Component {\n\n    state = {\n        char: null,\n        loading: false,\n        error: false\n    }\n\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n        // this.timerId = setInterval(this.updateChar, 15000);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.charId !== prevProps.charId){\n            this.updateChar();\n        }\n        \n    }\n\n   \n    \n\n    updateChar = () => {\n        const {charId} = this.props;\n        if(!charId) {\n            return;\n        }\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n          \n    }\n\n    onCharLoaded = (char) => {\n        this.setState({\n            char, \n            loading: false\n        })\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true\n        })\n    }\n\n   render(){\n        const {char,loading,error}  = this.state\n\n       \n        const skeleton = char || loading || error ? null : <Skeleton></Skeleton>\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n   }\n}\n\nconst View = ({char}) =>{\n    \n\n    const {name, description, thumbnail, homepage, wiki, comics} = char; \n    let imgStyle = {'objectFit' : 'cover'};\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n     \n    return (\n        <>\n        <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>  \n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null: 'There is no comics available'}\n            {\n                comics.map((item, i) =>{\n                    // eslint-disable-next-line \n                     if( i > 9) return;\n                    return (\n                        \n                        <li key = {i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    )\n                    \n                   \n                })\n            }\n           \n            \n        </ul></>\n    )\n\n    \n}\n// как делается проверка типов\nCharInfo.propTypes  = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMesage from \"../errorMessage/ErrorMessage\";\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n// этот метод для обучнеия просто, он обновляет стейт с ошибкой\r\n    // static getDerivedStateFromError(error){\r\n    //     return {error: true};\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return  <ErrorMesage/>\r\n        }\r\n        // это компонент что бы передан во внутрь компонента ErrorBoundary, как бы его ребенок\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from 'react';\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport decoration from '../../resources/img/vision.png';\n\n\nclass App extends Component {\n    state = {\n        selectedChar: null,\n        \n    }\n\n    onCharSelected = (id) =>{\n        this.setState({\n            selectedChar: id,\n            \n        })\n       \n        // console.log(this.state.selectedChar)\n    }\n    render(){\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                        {/* selectedChar = {this.state.selectedChar} -  для моего дз в низу! */}\n                            <CharList onCharSelected = {this.onCharSelected} selectedChar = {this.state.selectedChar}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId = {this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n// import MarvelService from './services/MarvelService';\nimport './style/style.scss';\n\n\n// const marvelService = new MarvelService();\n// marvelService.getAllCharacters().then(res => console.log(res))\n// marvelService.getAllCharacters().then(res => res.data.results.forEach(item => console.log(item.name)));\n// marvelService.getCharacter(1011052).then(res => console.log(res))\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}